name: Docker Images (Prod)
on:
  push:
    branches: [main]

jobs:
  docker-images:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "true"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: eu-north-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          NYRKIO_ENV_PROD: ${{ secrets.NYRKIO_ENV_PROD }}
          ENV: prod
        run: |
          # Build a docker container and push it to ECR
          echo "$NYRKIO_ENV_PROD" > .env.backend
          docker compose -f docker-compose.yml build
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/nyrkio/prod/nginx:$IMAGE_TAG
          docker push $ECR_REGISTRY/nyrkio/prod/backend:$IMAGE_TAG
          echo "image=$ECR_REGISTRY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Install poetry and all of the required project dependencies
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.7.1-0
      - uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      - run: cd backend && poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'
      - run: cd backend && poetry install --no-interaction

      - name: Run performance tests
        env:
          NYRKIO_ENV_TESTING: ${{ secrets.NYRKIO_ENV_TESTING }}
        run: |
          echo "$NYRKIO_ENV_TESTING" > .env.backend
          echo "Running performance tests..."
          docker compose -f docker-compose.dev.yml up -d
          cd backend && poetry run pytest --benchmark-disable-gc --benchmark-warmup=on --benchmark-max-time=10 --benchmark-save=results benches/ && cd ..
          docker compose -f docker-compose.dev.yml down
          cd backend && poetry run python benches/process_results.py $(find .benchmarks -name "*.json")
